load("general.ric")

lines = getLines("inputs/12.txt")

# Cachepot, a simple dictionary type that only stores references.
# I implemented this data type because I saw a need for faster
# dictionaries when I solved part 2 of this problem.
# Part 1 worked already without any optimizations that required
# a dictionary. 
# Cachepots are today very new, and only supports basic operations
# such as printing, contain and indexing. They also are only
# safe to use in the global context.
# In the future, all dictionaries may be implemented
# in the same way as these 'cachepots'.
# That will require extra work to ensure safety.
# It is a more 'under-the-hood' kind of datatype at this point,
# will need to document it after I have worked some more on it.
arrangementsCache = cachepot()
@ arrangements(index, g_index, acc, groups, records, path) {
  ret = 0
  key = "" + index + "," + records + "," + g_index + "," + acc 
  . ( groups ... g ) { key += g + "," }
  ? [ arrangementsCache.contains(key) ] {
    -> arrangementsCache[key]
  }
  ? [ index == len(records) ] {
    ? [ g_index == len(groups) - 1 ] {
      ? [ acc > 0 && groups[g_index] == acc ] {
      -> bigInt(1)
      } ~ [ acc == 0 && records[index - 1] == "o" ] {
        -> bigInt(1)
      }
    } ~ [ g_index == len(groups) && path[-1] == "." && acc == 0 ] {
      -> bigInt(1)
    } ~ {
      -> bigInt(0)
    }
  } ~ {
    char = records[index]
    ? [ char == "." ] {
      ? [ acc > 0 && g_index < len(groups) ] {
        ? [ groups[g_index] == acc ] {
          -> arrangements(index + 1, g_index + 1, 0, groups, records, path + char)
        }
      } ~[ acc == 0 ] {
        -> arrangements(index + 1, g_index, 0, groups, records, path + char)
      }
    } ~[ char == "o" ] {
      -> arrangements(index + 1, g_index, acc + 1, groups, records, path + char)
    } ~[ char == "?" ] {
      # if it was a dot
      ? [ acc > 0 && g_index < len(groups) ] {
        ? [ groups[g_index] == acc ] {
          ret += arrangements(index + 1, g_index + 1, 0, groups, records, path + ".")
        }
      } ~ [ acc == 0 ] {
        ret += arrangements(index + 1, g_index, 0, groups, records, path + ".")
      }
      # if it was an 'o' (:%s/#/o/g ....)
      ret += arrangements(index + 1, g_index, acc + 1, groups, records, path + "o")
    }
  }
  arrangementsCache[key] = ret
  -> ret
}

@ getNbrArrangements(line) {
  groups = line.split(" ")[1]
  groups = [ ( groups.split(",") ... g ) { g.parseInt() } ]
  records = line.split(" ")[0]
  arr = arrangements(0, 0, 0, groups, records, "")
  -> arr
}

sumPartOne = 0
. ( lines ... line ) {
  sumPartOne += getNbrArrangements(line)
}

print("Part 1: " + sumPartOne)

idx = 0
sumPartTwo = bigInt(0)
. ( lines ... line ) {
  rules = line.split(" ")[0]
  groups = line.split(" ")[1]
  
  rules = join([rules] * 5, "?")
  groups = join([groups] * 5, ",")

  folded_line = rules + " " + groups
  a = getNbrArrangements(folded_line)
  idx += 1
  printf("\rworking on " + idx + " of " + len(lines) + "...")
  sumPartTwo += a
}

print("Part 2: " + sumPartTwo)
