load("general.ric")

lines = getLines("inputs/12.txt")

@ arrangements(index, g_index, acc, groups, records, path) {
  ret = 0

  ? [ index == len(records) ] {
    ? [ g_index == len(groups) - 1 ] {
      ? [ acc > 0 && groups[g_index] == acc ] {
      -> 1
      } ~ [ acc == 0 && records[index - 1] == "o" ] {
        -> 1
      }
    } ~ [ g_index == len(groups) && path[-1] == "." && acc == 0 ] {
      -> 1
    } ~ {
      -> 0
    }
  } ~ {
    char = records[index]
    ? [ char == "." ] {
      ? [ acc > 0 && g_index < len(groups) ] {
        ? [ groups[g_index] == acc ] {
          -> arrangements(index + 1, g_index + 1, 0, groups, records, path + char)
        }
      } ~[ acc == 0 ] {
        -> arrangements(index + 1, g_index, 0, groups, records, path + char)
      }
    } ~[ char == "o" ] {
      -> arrangements(index + 1, g_index, acc + 1, groups, records, path + char)
    } ~[ char == "?" ] {
      # if it was a dot
      ? [ acc > 0 && g_index < len(groups) ] {
        ? [ groups[g_index] == acc ] {
          ret += arrangements(index + 1, g_index + 1, 0, groups, records, path + ".")
        }
      } ~ [ acc == 0 ] {
        ret += arrangements(index + 1, g_index, 0, groups, records, path + ".")
      }
      # if it was an 'o' (:%s/#/o/g ....)
      ret += arrangements(index + 1, g_index, acc + 1, groups, records, path + "o")
    }
  }

  -> ret
}

arrangementsCache = {}
@ arrangementsCached(index, g_index, acc, groups, records, path) {
  key = "" + index + "," + records + "," + g_index + "," + acc 
  . ( groups ... g ) { key += g + "," }
  ? [ arrangementsCache.contains(key) ] {
    -> arrangementsCache[key]
  }
  ret = arrangements(index, g_index, acc, groups, records, path)
  arrangementsCache[key] = ret
}

@ getNbrArrangements(line) {
  groups = line.split(" ")[1]
  groups = [ ( groups.split(",") ... g ) { g.parseInt() } ]
  records = line.split(" ")[0]
  arr = arrangements(0, 0, 0, groups, records, "")
  -> arr
}

sumPartOne = 0
. ( lines ... line ) {
  sumPartOne += getNbrArrangements(line)
}

print("Part 1: " + sumPartOne)

sumPartTwo = 0

# I am pretty sure this would do it, but unfortunately
# my intepreter breaks because of memory constraints
# and inefficiencies with the caching.. 
idx = 0
. ( lines ... line ) {
  rules = line.split(" ")[0]
  groups = line.split(" ")[1]
  
  rules = join([rules] * 5, "?")
  groups = join([groups] * 5, ",")

  folded_line = rules + " " + groups
  print(folded_line)
  # Uncomment for inefficient caching
  # I might work on this ...
  #a = getNbrArrangements(folded_line)

  idx += 1
  sumPartTwo += a
}

# print("Part 2: " + sumPartTwo)
