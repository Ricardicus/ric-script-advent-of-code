load("general.ric")

lines = getLines("inputs/17.txt")

map = [[]] * lines.len()

i = 0
. ( lines ... line ) {
  . ( line ... nbr ) {
    append(map[i], nbr.parseInt())
  }
  i += 1
}

@ isIn(i, j) {
  ? [ i < 0 || j < 0 ] {
    -> 0
  }
  ? [ i >= len(map) || j >= len(map[0]) ] {
    -> 0
  }
  -> 1
}

directions = {"up": [-1, 0], "down": [1, 0], "left": [0, 1], "right": [0, -1]}
directions_relative = ["left", "down", "right", "up"]

visited = cachepot()
losses = {}

print("Building map...")
i = 0
. [ i < len(map) ] {
  j = 0
  . [ j < len(map[0]) ] {
    . ( directions ... dir ) {
      checks = directions[dir]
      i_check = i + checks[0]
      j_check = j + checks[1]

      ? [ isIn(i_check, j_check) ] {
        key = "" + i + "," + j + "," + dir
        losses[key] = map[i_check][j_check]
      }
    }
    j += 1
    @
  }
  i += 1
  @
}
print("Map built!")

maxVal = sum(map[0][:]) + sum(map[:][0]) + sum(map[1][:]) + sum(map[:][1])
print(maxVal)

final_key = "" + (len(map) - 1) + "," + (len(map[0]) - 1)

best_path = ""

to_visit = prioQueue()

maxI = 0

@ test() {
  -> 1
}

@Â djikstra() {
  # first 
  current = [0,0]

  topPrio = 999999
  # start iterations, position, direction, loss, consecutive moves, debugging stuff the rest
  to_visit.prioInsert([current, 0, 0, 0], topPrio)
  to_visit.prioInsert([current, 1, 0, 0], topPrio)
  to_visit.prioInsert([current, 2, 0, 0], topPrio)
  # best heat loss
  min_heat_loss = 999999

  @ getNextToVisit() {
    -> to_visit.prioPop()
  }

  . [ to_visit.len() > 0 ] {
    current_ = getNextToVisit()
    current = current_[0]
    c_dir_idx = current_[1]
    acc = current_[2]
    consecutive = current_[3]

    ? [ current[0] > maxI ] {
      maxI = current[0]
      print("new maxI: " + maxI + " (" + (len(map) - 1) + ")")
    }
    indexes = [(c_dir_idx-1+4)%4, c_dir_idx%4, (c_dir_idx+4+1)%4]
    indexes_str = [ ( indexes ... i ) { 
      directions_relative[i]
    }]
    indexes_str_rel = ["right", "forward", "left"]

    c = "" + current[0] + "," + current[1] + "," + (c_dir_idx%2) + "," + consecutive 
    current_check_key = "" + current[0] + "," + current[1]
    foundEnd = 0
    ? [ min_heat_loss > acc && current_check_key == final_key ] {
        min_heat_loss = acc
        foundEnd = 1
        print("New best score: " + min_heat_loss)
    }
    ? [ visited.contains(c) ] {
      @
    }
    visited[c] = 1

    ? [ acc > min_heat_loss || acc > maxVal ] {
      @
    }

    # Check directions 
    q = 0
    . [ q < 3 ] {
      rel_idx = indexes[q]
      dir_rel_str = indexes_str_rel[q]
      dir_str = indexes_str[q]
      checks = directions[dir_str]
      i_check = current[0] + checks[0]
      j_check = current[1] + checks[1]
      foundEnd = 0
      new_consecutive = 1
      ? [ q == 1 ] {
        # This means continue forward
        new_consecutive = consecutive + 1
      }

      q += 1
      ? [ !isIn(i_check, j_check) ] {
        @ 
      }
      ? [ new_consecutive > 3 ] {
        # Skip this path, cant go forward any more
        @
      }
      
      loss_key = "" + current[0] + "," + current[1] + "," + dir_str
      loss = losses[loss_key]
      to_visit.prioInsert([[i_check, j_check], rel_idx, loss+acc, new_consecutive], topPrio-(loss+acc))
      @
    }
    @
  }
}

@ printMapWithBestPath() {
  i = 0
  acc = 0
  . [ i < map.len() ] {
    j = 0
    . [ j < len(map[0]) ] {
      ? [ best_path.contains([i,j]) ] {
        printf("(" + map[i][j] + ")")
        acc += map[i][j]
      } ~ {
        printf(" " + map[i][j] + " ")
      }
      j += 1
      @
    }
    printf("    " + acc + "\n")
    i += 1
    @
  }
}


print("DJIKSTRA")
djikstra()

print("OK!")

#printMapWithBestPath()
#

exit(0)



best_path = []
best_rel_dirs = ""

@ dp (i, j, d, relative_dir_idx, dirs, path, acc) {
  ? [ !isIn(i,j) ] {
    -> 0
  }

  pos = "" + i + "," + j

  ? [ dirs.len() >= 4 ] {
    ? [ dirs[-1] == dirs[-2] && dirs[-2] == dirs[-3] && dirs[-3] == dirs[-4] ] {
      -> 0
    }
  }

  ? [ visited.contains(pos) ] {
    -> 0
  }

  print(pos)
  path.append([i,j])
  
  indexes = [(relative_dir_idx-1+4)%4, relative_dir_idx%4, (relative_dir_idx+4+1)%4]
  indexes_str = [ ( indexes ... i ) { 
    directions_relative[i]
  }]
  indexes_str_rel = ["right", "forward", "left"]

  q = 0
  . [ q < indexes.len() ] {
      d = directions_relative[relative_dir_idx]
      dir = indexes_str[q]
      q += 1
      checks = directions[dir]
      i_check = i + checks[0]
      j_check = j + checks[1]
      ? [ isIn(i_check, j_check) ] {
        dirpaths = dirs + [indexes_str_rel[q-1]]
        key = "" + i + "," + j + "," + dir
        check_pos_key = "0,0-" + i_check + "," + j_check
        endPos = 0
        candidate_value = acc + losses[key]
        continue = 1
        ? [ dirpaths.len() >= 4 ] {
          ? [ dirpaths[-1] == dirpaths[-2] && dirpaths[-2] == dirpaths[-3] && dirpaths[-3] == dirpaths[-4] ] {
            @
          }
        }
        ? [ i_check == len(map) - 1 && j_check == len(map[0]) - 1 ] {
          endPos = 1
          print("END POS: " + candidate_value)
        }
        ? [ candidate_value < min_losses[check_pos_key] ] {
          min_losses[check_pos_key] = candidate_value
          ? [ endPos ] {
            print("New best val: " + candidate_value)
            best_path = path + [[i_check, j_check]]
            best_rel_dirs = dirpaths
          }
        }
        ? [ !endPos ] {
          v = dp(i_check, j_check, dir, indexes[q-1], dirpaths, path, candidate_value)
        }
     }
    @
  }
 
  visited.append(pos)

}

@ printMapWithBestPath() {
  i = 0
  acc = 0
  . [ i < map.len() ] {
    j = 0
    . [ j < len(map[0]) ] {
      ? [ best_path.contains([i,j]) ] {
        printf("(" + map[i][j] + ")")
        acc += map[i][j]
      } ~ {
        printf(" " + map[i][j] + " ")
      }
      j += 1
      @
    }
    printf("    " + acc + "\n")
    i += 1
    @
  }
}





print("Going in...")
dp(0, 0, "", 0, [], [], 0)
print("went out!")
print(min_losses)

print("Part 1: " + min_losses[final_key])

printMapWithBestPath()
print(best_rel_dirs)

