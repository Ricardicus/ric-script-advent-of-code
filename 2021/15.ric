load("general.ric")

lines = getLines("inputs/15.txt")

map = [[]] * lines.len()

i = 0
. ( lines ... line ) {
  . ( line ... nbr ) {
    append(map[i], nbr.parseInt())
  }
  i += 1
}

@ isIn(i, j) {
  ? [ i < 0 || j < 0 ] {
    -> 0
  }
  ? [ i >= len(map) || j >= len(map[0]) ] {
    -> 0
  }
  -> 1
}

directions = {"up": [-1, 0], "down": [1, 0], "left": [0, 1], "right": [0, -1]}
directions_relative = ["left", "down", "right", "up"]

visited = cachepot()
risks = cachepot()

i = 0
. [ i < len(map) ] {
  j = 0
  . [ j < len(map[0]) ] {
    . ( directions ... dir ) {
      checks = directions[dir]
      i_check = i + checks[0]
      j_check = j + checks[1]

      ? [ isIn(i_check, j_check) ] {
        key = "" + i + "," + j + "," + dir
        risks[key] = map[i_check][j_check]
      }
    }
    j += 1
    @
  }
  i += 1
  @
}

# In case we go astray, limit the loss value to this
maxVal = sum(map[0][:]) + sum(map[:][0]) + sum(map[1][:]) + sum(map[:][1])

final_key = "" + (len(map) - 1) + "," + (len(map[0]) - 1)
best_path = ""

to_visit = minHeap()
maxI = 0

@ partOne() {
  # first 
  current = [0,0]

  # start iterations, position, direction, loss, consecutive moves, debugging stuff the rest
  to_visit.heapInsert([current, 0, 0], 0)
  to_visit.heapInsert([current, 1, 0], 0)
  to_visit.heapInsert([current, 2, 0], 0)
  # lowest risk
  min_risk = 999999

  @ getNextToVisit() {
    -> to_visit.heapPop()
  }

  . [ to_visit.len() > 0 ] {
    current_ = getNextToVisit()
    current = current_[0]
    c_dir_idx = current_[1]
    acc = current_[2]

    ? [ current[0] > maxI ] {
      maxI = current[0]
      #printf("\r" + maxI + " (" + (len(map) - 1) + ")")
    }
    indexes = [(c_dir_idx-1+4)%4, c_dir_idx%4, (c_dir_idx+4+1)%4]
    indexes_str = [ ( indexes ... i ) { 
      directions_relative[i]
    }]
    indexes_str_rel = ["right", "forward", "left"]

    c = "" + current[0] + "," + current[1] + "," + (c_dir_idx%2) 
    current_check_key = "" + current[0] + "," + current[1]
    foundEnd = 0
    ? [ min_risk > acc && current_check_key == final_key ] {
        min_risk = acc
        foundEnd = 1
        #print("\rPart 1: " + min_risk)
        print("Part 1: " + min_risk)
    }
    ? [ visited.contains(c) ] {
      @
    }
    visited[c] = 1

    # Check directions 
    q = 0
    . [ q < 3 ] {
      rel_idx = indexes[q]
      dir_rel_str = indexes_str_rel[q]
      dir_str = indexes_str[q]
      checks = directions[dir_str]
      i_check = current[0] + checks[0]
      j_check = current[1] + checks[1]
      foundEnd = 0

      q += 1
      ? [ !isIn(i_check, j_check) ] {
        @ 
      }
      
      risk_key = "" + current[0] + "," + current[1] + "," + dir_str
      risk = risks[risk_key]
      to_visit.heapInsert([[i_check, j_check], rel_idx, risk+acc] , risk+acc)
      @
    }
    @
  }
}

partOne()

to_visist = minHeap()
visited = cachepot()
risks_part_two = cachepot()
maxI = 0

@ isInPart2(i, j) {
  ? [ i < 0 || j < 0 ] {
    -> 0
  }
  ? [ i >= (len(map)*5) || j >= (len(map[0])*5) ] {
    -> 0
  }
  -> 1
}

@ getMapValue(i, j) {
  ? [ !isInPart2(i, j) ] {
    -> 0
  }

  divsI = i / len(map)
  divsJ = j / len(map[0])

  val = map[i%len(map)][j%len(map[0])]

  ? [ divsI > 0 || divsJ > 0 ] {
    v = val - 1
    v += divsJ + divsI
    v = v % 9
    val = v + 1
  }

  -> val
}

i = 0
. [ i < len(map)*5 ] {
  j = 0
  . [ j < len(map[0])*5 ] {
    . ( directions ... dir ) {
      checks = directions[dir]
      i_check = i + checks[0]
      j_check = j + checks[1]

      ? [ isInPart2(i_check, j_check) ] {
        key = "" + i + "," + j + "," + dir
        risks_part_two[key] = getMapValue(i_check,j_check)
      }
    }
    j += 1
    @
  }
  i += 1
  @
}

@ printBigMap() {
  i = 0
  . [ i < len(map) * 5 ] {
    j = 0
    . [ j < (len(map[0]) * 5) ] {
      ? [ isIn(i, j) ] {
        printf(" *")
      } ~{
        printf(" " + getMapValue(i, j))
      }
      j += 1
      @
    }
    print("")
    i += 1
    @
  }
  print(len(map)*5)
  print(len(map[0])*5)
}

@ getMaxValPartTwo() {
  s = 0
  i = 0
  . [ i < 1 ] {
    j = 0
    . [ j < (len(map[0]) * 5) ] {
      s += getMapValue(i, j)
      j += 1
      @
    }
    i += 1
    @
  }
  i = 0
  . [ i < len(map) * 5 ] {
    j = 0
    . [ j < 1 ] {
      s += getMapValue(i, j)
      j += 1
      @
    }
    i += 1
    @
  }
  -> s
}

#printBigMap()
maxVal = getMaxValPartTwo()
maxI = 0
final_key = "" + (len(map)*5 - 1) + "," + (len(map[0])*5 - 1)
@ partTwo() {
  # first 
  current = [0,0]

  # start iterations, position, direction, loss, consecutive moves, debugging stuff the rest
  to_visit.heapInsert([current, 0, 0], 0)
  to_visit.heapInsert([current, 1, 0], 0)
  to_visit.heapInsert([current, 2, 0], 0)
  # lowest risk
  min_risk = 999999

  @ getNextToVisit() {
    -> to_visit.heapPop()
  }

  . [ to_visit.len() > 0 ] {
    current_ = getNextToVisit()
    current = current_[0]
    c_dir_idx = current_[1]
    acc = current_[2]

    ? [ current[0] > maxI ] {
      maxI = current[0]
      #printf("\r" + maxI + " (" + (len(map)*5 - 1) + ")")
    }

    ? [ acc > maxVal ] {
      @
    }
    indexes = [(c_dir_idx-1+4)%4, c_dir_idx%4, (c_dir_idx+4+1)%4]
    indexes_str = [ ( indexes ... i ) { 
      directions_relative[i]
    }]
    indexes_str_rel = ["right", "forward", "left"]

    c = "" + current[0] + "," + current[1] + "," + (c_dir_idx%2) 
    current_check_key = "" + current[0] + "," + current[1]
    foundEnd = 0
    ? [ min_risk > acc && current_check_key == final_key ] {
        min_risk = acc
        foundEnd = 1
        #print("\rPart 1: " + min_risk)
        #print(positions)
        print("Part 2: " + min_risk)
    }
    ? [ visited.contains(c) ] {
      @
    }
    visited[c] = 1

    # Check directions 
    q = 0
    . [ q < 3 ] {
      rel_idx = indexes[q]
      dir_rel_str = indexes_str_rel[q]
      dir_str = indexes_str[q]
      checks = directions[dir_str]
      i_check = current[0] + checks[0]
      j_check = current[1] + checks[1]
      foundEnd = 0

      q += 1
      ? [ !isInPart2(i_check, j_check) ] {
        @ 
      }
      
      risk_key = "" + current[0] + "," + current[1] + "," + dir_str
      risk = risks_part_two[risk_key]
      to_visit.heapInsert([[i_check, j_check], rel_idx, risk+acc] , risk+acc)
      @
    }
    @
  }
}

@ printBestPath() {
  i = 0
  . [ i < len(map) * 5 ] {
    j = 0
    . [ j < len(map[0]) * 5 ] {
      ? [ best_path.contains([i,j]) ] {
        printf("(" + getMapValue(i,j) + ")")
      } ~ {
        printf(" " + getMapValue(i,j) + " ")
      }
      j += 1
      @
    }
    print("")
    i += 1
    @
  }

}

partTwo()

#printBestPath()
