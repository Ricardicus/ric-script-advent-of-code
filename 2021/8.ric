load("general.ric")

line = getLines("inputs/8.txt")

rhs = []
. ( line ... l ) {
   rhs.append( trim(l.split("|")[1]) )
}
bgdfc bcfga bfgdc c
lens = [ ( 10 ... i ) { 0 } ]

. ( rhs ... signs ) {
   s = signs.split(" ")
   . ( s ... sign ) {
      lens[len(sign)] += 1
   }
   q = len(s)
}

# One has length 2, 4 has 4, 7 has 3, 8 has 7
result = lens[2] + lens[4] + lens[3] + lens[7] 

print("Part 1: " + result)

# for part 2
# number -> length
# 8 -> 7
# 0 -> 6
# 6 -> 6
# 9 -> 6
# 2 -> 5
# 5 -> 5
# 3 -> 5
# 4 -> 4
# 7 -> 3
# 1 -> 2
# in case len 5:
# if match with 1 -> 3
# else if 3 matches with 4 -> 5
# else 2
# in case len 6:
# if not match with 1 -> 6
# else if not match with 4 -> 0
# else 9

@ checkMatches(a, b) {
   count = 0
   . ( a ... check ) {
      ? [ b.contains(check) ] {
         count += 1
      }
   }
   -> count
}

@ checkNumber(a, one, four) {
   l = len(a)
   ? [ l == 2 ] {
      -> 1
   } ~[ l == 3 ] {
      -> 7
   } ~[ l == 4 ] {
      -> 4
   } ~[ l == 7 ] {
      -> 8
   } ~[ l == 5 ] {
      p = checkMatches(a, one)
      ? [ p == 2 ] {
         -> 3
      }
      p = checkMatches(a, four)
      ? [ p == 3 ] {
         -> 5
      }
      -> 2
   } ~[ l == 6 ] {
      p = checkMatches(a, one)
      ? [ p != 2 ] {
         -> 6
      }
      p = checkMatches(a, four)
      ? [ p != 4 ] {
         -> 0
      }
      -> 9
   }
}

lines = getLines("inputs/8.txt")

lhs = []
rhs = []
. ( line ... l ) {
   lhs.append( trim(l.split("|")[0]) )
   rhs.append( trim(l.split("|")[1]) )
}

sum = 0
i = 0
. [ i < len(lhs) ] {
   l = lhs[i]
   words = l.split(" ")
   four = ""
   one = ""
   . ( words ... w ) {
      q = len(w)
      ? [ q == 2 ] {
         one = w
      } ~[ q == 4 ] {
         four = w
      }
   }

   l = rhs[i]
   words = l.split(" ")
   numberString = ""
   . ( words ... w ) {
      s = checkNumber(w, one, four)
      numberString += textBase(checkNumber(w, one, four), 10)
   }
   sum += parseInt(numberString)
   i += 1
   @
}

print("Part 2: " + sum)


